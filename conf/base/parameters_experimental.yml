# Preprocessing parameters for experimental pipeline
strict_moderation: false
polis_id: "${runtime_params:polis_id, ${globals:build_polis_id}}" # small for tests, can be overridden via CLI
polis_url: "${runtime_params:polis_url, ${globals:build_polis_url}}" # Alternative to polis_id + base_url, e.g. "https://polis.example.com/{polis_id}" or "https://polis.example.com/report/{polis_id}"
min_votes_threshold: 7
base_url: null # Default to null, which will use https://pol.is in PolisAPIDataset
import_dir: null

visualization:
  flip_x: false
  flip_y: false

# NOTES:
#
#   - Any `${globals:*}` variables is set in the `globals.yml` file.
#   - A `null` value is converted to `None` in Python.
#   - When `random_state` set to null/None, a randomness generator will be used,
#     and pipelines will be non-deterministic.
#   - An `&anchor` is a named YAML reference, merged back in via `<<: *anchor`.
#   - An `input:*` value means that estimator will use that catalog item as it's input.

pipelines:
  # The original polis pipeline.
  mean_pca_bestkmeans: &polis_classic
    imputer:
      name: SimpleImputer
      strategy: mean

    reducer:
      name: PCA
      n_components: 2

    scaler:
      name: SparsityAwareScaler
      X_sparse: "input:masked_vote_matrix"

    filter:
      name: SampleMaskFilter
      mask: "input:participant_mask"

    clusterer:
      name: BestKMeans
      k_bounds: [2, 5]
      random_state: ${globals:random_state}

  mean_pca_bestkmeans_missing_transforms:
    <<: *polis_classic
    scaler:
      name: NoOpTransformer

    # # Breaks plots.
    # filter:
    #   name: NoOpTransformer

  # mean_pca_hdbscan:
  #   <<: *polis_classic
  #   clusterer:
  #     name: HDBSCAN

  # mean_pca_besthdbscanflat:
  #   <<: *polis_classic
  #   clusterer:
  #     name: BestHDBSCANFlat
  #     k_bounds: [2, 5]

  mean_pacmap_bestkmeans:
    imputer:
      name: SimpleImputer
      strategy: mean

    reducer:
      name: PaCMAP
      n_components: 2
      n_neighbors: null

    scaler:
      name: NoOpTransformer

    filter:
      name: SampleMaskFilter
      mask: "input:participant_mask"

    clusterer:
      name: BestKMeans
      k_bounds: [2, 5]
      random_state: ${globals:random_state}

  # mean_pacmap_besthdbscanflat:
  #   imputer:
  #     name: SimpleImputer
  #     strategy: mean

  #   reducer:
  #     name: PaCMAP
  #     n_components: 2
  #     n_neighbors: null
  #     random_state: ${globals:random_state}

  #   scaler:
  #     name: NoOpTransformer

  #   filter:
  #     name: SampleMaskFilter
  #     mask: "input:participant_mask"

  #   clusterer:
  #     name: BestHDBSCANFlat
  #     k_bounds: [2, 7]
  #     min_cluster_size: 20

  # mean_localmap_besthdbscanflat_eom: &mean_localmap_besthdbscanflat
  #   imputer:
  #     name: SimpleImputer
  #     strategy: mean

  #   reducer:
  #     name: LocalMAP
  #     n_components: 2
  #     n_neighbors: null
  #     random_state: ${globals:random_state}

  #   scaler:
  #     name: NoOpTransformer

  #   filter:
  #     name: SampleMaskFilter
  #     mask: "input:participant_mask"

  #   clusterer:
  #     name: BestHDBSCANFlat
  #     k_bounds: [2, 7]
  #     min_cluster_size: 20
  #     cluster_selection_method: "eom"

  # mean_localmap_besthdbscanflat_leaf:
  #   <<: *mean_localmap_besthdbscanflat
  #   clusterer:
  #     name: BestHDBSCANFlat
  #     k_bounds: [2, 7]
  #     min_cluster_size: 20
  #     cluster_selection_method: "leaf"

  mean_localmap_bestkmeans:
    imputer:
      name: SimpleImputer
      strategy: mean

    reducer:
      name: LocalMAP
      n_components: 2
      n_neighbors: null
      random_state: ${globals:random_state}

    scaler:
      name: NoOpTransformer

    filter:
      name: SampleMaskFilter
      mask: "input:participant_mask"

    clusterer:
      name: BestKMeans
      k_bounds: [2, 7]
      random_state: ${globals:random_state}

  # knn5d_pacmap_besthdbscanflat: &knn5d_pacmap_besthdbscanflat
  #   imputer:
  #     name: KNNImputer
  #     n_neighbors: 5
  #     weights: distance

  #   reducer:
  #     name: PaCMAP
  #     n_components: 2
  #     n_neighbors: null
  #     random_state: ${globals:random_state}

  #   scaler:
  #     name: NoOpTransformer

  #   filter:
  #     name: SampleMaskFilter
  #     mask: "input:participant_mask"

  #   clusterer:
  #     name: BestHDBSCANFlat
  #     k_bounds: [2, 7]

  # knn5d_localmap_besthdbscanflat:
  #   <<: *knn5d_pacmap_besthdbscanflat
  #   reducer:
  #     name: LocalMAP
  #     n_components: 2
  #     n_neighbors: null
  #     random_state: ${globals:random_state}

  # knn5d_pca_besthdbscanflat:
  #   <<: *knn5d_pacmap_besthdbscanflat
  #   reducer:
  #     name: PCA
  #     n_components: 2
  #     random_state: ${globals:random_state}

  knn5d_pacmap_bestkmeans: &knn5d_pacmap_bestkmeans
    imputer:
      name: KNNImputer
      n_neighbors: 5
      weights: distance

    reducer: &pacmap_reducer
      name: PaCMAP
      n_components: 2
      n_neighbors: null
      random_state: ${globals:random_state}

    scaler:
      name: NoOpTransformer

    filter:
      name: SampleMaskFilter
      mask: "input:participant_mask"

    clusterer:
      name: BestKMeans
      k_bounds: [2, 5]
      random_state: ${globals:random_state}

  knn5d_localmap_bestkmeans:
    <<: *knn5d_pacmap_bestkmeans
    reducer:
      <<: *pacmap_reducer
      name: LocalMAP
      random_state: ${globals:random_state}

  knn5d_pca_bestkmeans:
    <<: *knn5d_pacmap_bestkmeans
    reducer:
      name: PCA
      n_components: 2
      random_state: ${globals:random_state}

  mean_umap_bestkmeans:
    <<: *knn5d_pacmap_bestkmeans
    imputer:
      name: SimpleImputer
      strategy: mean

    reducer:
      name: UMAP
      n_components: 2
      n_neighbors: 15
      random_state: ${globals:random_state}

  knn5d_umap_bestkmeans:
    <<: *knn5d_pacmap_bestkmeans
    reducer:
      name: UMAP
      n_components: 2
      n_neighbors: 15
      random_state: ${globals:random_state}
